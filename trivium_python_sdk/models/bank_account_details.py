# coding: utf-8

"""
    trivium-cash

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.2.8.dev0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trivium_python_sdk.models.payment_type import PaymentType
from trivium_python_sdk.models.routing_code_type import RoutingCodeType
from typing import Optional, Set
from typing_extensions import Self

class BankAccountDetails(BaseModel):
    """
    BankAccountDetails
    """ # noqa: E501
    payment_type: PaymentType = Field(alias="paymentType")
    currency: StrictStr
    bank_name: StrictStr = Field(alias="bankName")
    bank_account_holder_name: StrictStr = Field(alias="bankAccountHolderName")
    bank_account_number: StrictStr = Field(alias="bankAccountNumber")
    bank_country_code: StrictStr = Field(alias="bankCountryCode")
    routing_code_type1: Optional[RoutingCodeType] = Field(default=None, alias="routingCodeType1")
    routing_code_value1: Optional[StrictStr] = Field(default=None, alias="routingCodeValue1")
    routing_code_type2: Optional[RoutingCodeType] = Field(default=None, alias="routingCodeType2")
    routing_code_value2: Optional[StrictStr] = Field(default=None, alias="routingCodeValue2")
    __properties: ClassVar[List[str]] = ["paymentType", "currency", "bankName", "bankAccountHolderName", "bankAccountNumber", "bankCountryCode", "routingCodeType1", "routingCodeValue1", "routingCodeType2", "routingCodeValue2"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankAccountDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankAccountDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentType": obj.get("paymentType"),
            "currency": obj.get("currency"),
            "bankName": obj.get("bankName"),
            "bankAccountHolderName": obj.get("bankAccountHolderName"),
            "bankAccountNumber": obj.get("bankAccountNumber"),
            "bankCountryCode": obj.get("bankCountryCode"),
            "routingCodeType1": obj.get("routingCodeType1"),
            "routingCodeValue1": obj.get("routingCodeValue1"),
            "routingCodeType2": obj.get("routingCodeType2"),
            "routingCodeValue2": obj.get("routingCodeValue2")
        })
        return _obj


